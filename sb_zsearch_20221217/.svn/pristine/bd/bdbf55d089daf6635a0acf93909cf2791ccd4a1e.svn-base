package com.vo;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;

import org.hibernate.engine.jdbc.StreamUtils;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.vo.repository.CiRepository;
import com.votool.ze.ZE;
import com.votool.ze.ZES;

import cn.hutool.core.util.StrUtil;

/**
 *
 *
 * @author zhangzhen
 * @date 2022年12月17日
 *
 */
@Component
public class Readbook implements InitializingBean{

	@Autowired
	private CiRepository ciRepository;

	@Override
	public void afterPropertiesSet() throws Exception {
		System.out.println(java.time.LocalDateTime.now() + "\t" + Thread.currentThread().getName() + "\t"
				+ "Readbook.afterPropertiesSet()");

		final ZE ze = ZES.newZE(200);

		final String url = "D:\\from_E_mx500_20221211\\__jpmnb\\3000本txt\\downbank\\";

		final File file = new File(url);
		final File[] array = file.listFiles();
		for (final File f : array) {

			ze.executeInQueue(() -> {

				System.out.println(java.time.LocalDateTime.now() + "\t" + Thread.currentThread().getName() + "\t"
						+ "开始读取文件f = " + f.getAbsolutePath());

				final String filecharset = getFilecharset(f);

				try {
					final BufferedReader reader = new BufferedReader(
							new InputStreamReader(new FileInputStream(f), filecharset));
					while (true) {
						try {
							final String string = reader.readLine();
							if (string == null) {
								break;
							}
							ze.executeInQueue(() -> this.ciRepository.add(string));
						} catch (final IOException e) {
							e.printStackTrace();
						}
					}

					reader.close();
				} catch (final IOException e) {
					e.printStackTrace();
				}

			});
		}

	}

	private static  String getFilecharset(final File sourceFile) {
        String charset = "GBK";
        final byte[] first3Bytes = new byte[3];
        try {
            boolean checked = false;
            final BufferedInputStream bis = new BufferedInputStream(new FileInputStream(sourceFile));
            bis.mark(0);
            int read = bis.read(first3Bytes, 0, 3);
            if (read == -1) {
                //文件编码为 ANSI
                return charset;
            } else if (first3Bytes[0] == (byte) 0xFF
                    && first3Bytes[1] == (byte) 0xFE) {
                //文件编码为 Unicode
                charset = "UTF-16LE";
                checked = true;
            } else if (first3Bytes[0] == (byte) 0xFE
                    && first3Bytes[1] == (byte) 0xFF) {
                //文件编码为 Unicode big endian
                charset = "UTF-16BE";
                checked = true;
            } else if (first3Bytes[0] == (byte) 0xEF
                    && first3Bytes[1] == (byte) 0xBB
                    && first3Bytes[2] == (byte) 0xBF) {
                //文件编码为 UTF-8
                charset = "UTF-8";
                checked = true;
            }
            bis.reset();
            if (!checked) {
                int loc = 0;
                while ((read = bis.read()) != -1) {
                    loc++;
                    if (read >= 0xF0) {
                        break;
                    }
                    if (0x80 <= read && read <= 0xBF){
                        // 单独出现BF如下的，也算是GBK
                        break;
                    }
                    if (0xC0 <= read && read <= 0xDF) {
                        read = bis.read();
                        if (0x80 <= read && read <= 0xBF){
                            // 双字节 (0xC0 - 0xDF)
                            // (0x80
                            // - 0xBF),也可能在GB编码内
                            continue;
                        } else {
                            break;
                        }
                    } else if (0xE0 <= read && read <= 0xEF) {
                        // 也有可能出错，可是概率较小
                        read = bis.read();
                        if (0x80 <= read && read <= 0xBF) {
                            read = bis.read();
                            if (0x80 <= read && read <= 0xBF) {
                                charset = "UTF-8";
                            }
                        }
						break;
                    }
                }
            }
            bis.close();
        } catch (final Exception e) {
            e.printStackTrace();
        }
        return charset;
    }

}
